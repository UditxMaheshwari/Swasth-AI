import { useState } from 'react';

const DiabetesForm = () => {
  const [formData, setFormData] = useState({
    Pregnancies: '',
    Glucose: '',
    BloodPressure: '',
    SkinThickness: '',
    Insulin: '',
    BMI: '',
    DiabetesPedigreeFunction: '',
    Age: ''
  });

  const [result, setResult] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    setError('');
    setResult(null);

    try {
      const numericData = Object.fromEntries(
        Object.entries(formData).map(([key, value]) => [key, parseFloat(value) || 0])
      );

      const response = await fetch('/api/predict/diabetes', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(numericData)
      });

      if (!response.ok) {
        const errData = await response.json().catch(() => ({}));
        throw new Error(errData.error || 'Failed to get prediction');
      }

      const data = await response.json();
      setResult(data.prediction); // "Diabetic" or "Not Diabetic"
    } catch (err) {
      console.error('Prediction error:', err);
      setError(err.message || 'Error making prediction');
    } finally {
      setIsLoading(false);
    }
  };

  const formFields = [
    { name: 'Pregnancies', label: 'Pregnancies', type: 'number' },
    { name: 'Glucose', label: 'Glucose (mg/dL)', type: 'number' },
    { name: 'BloodPressure', label: 'Blood Pressure (mmHg)', type: 'number' },
    { name: 'SkinThickness', label: 'Skin Thickness (mm)', type: 'number' },
    { name: 'Insulin', label: 'Insulin Level (Î¼U/ml)', type: 'number' },
    { name: 'BMI', label: 'BMI', type: 'number', step: '0.1' },
    { name: 'DiabetesPedigreeFunction', label: 'Diabetes Pedigree Function', type: 'number', step: '0.001' },
    { name: 'Age', label: 'Age', type: 'number' }
  ];

  return (
    <div className="w-full max-w-2xl mx-auto p-4">
      <h2 className="text-xl font-semibold text-gray-800 mb-6">Diabetes Risk Assessment</h2>
      <form onSubmit={handleSubmit} className="space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {formFields.map((field) => (
            <div key={field.name}>
              <label htmlFor={field.name} className="block text-sm font-medium text-gray-700 mb-1">
                {field.label}
              </label>
              <input
                type={field.type}
                id={field.name}
                name={field.name}
                value={formData[field.name]}
                onChange={handleChange}
                step={field.step || '1'}
                min="0"
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                required
              />
            </div>
          ))}
        </div>

        <button
          type="submit"
          disabled={isLoading}
          className="w-full py-3 px-4 bg-blue-600 text-white rounded-md shadow-sm hover:bg-blue-700 disabled:opacity-50"
        >
          {isLoading ? 'Predicting...' : 'Predict Diabetes Risk'}
        </button>
      </form>

      {error && (
        <div className="mt-4 p-4 bg-red-50 border-l-4 border-red-400 rounded text-red-700">
          {error}
        </div>
      )}

      {result && (
        <>
          <div
            className={`mt-6 p-6 rounded-lg ${
              result === 'Diabetic'
                ? 'bg-red-50 border-l-4 border-red-400'
                : 'bg-green-50 border-l-4 border-green-400'
            }`}
          >
            <h3 className="text-sm font-medium">{result}</h3>
            <p className="mt-2 text-sm">
              {result === 'Diabetic'
                ? 'The model predicts a high risk of diabetes. Please consult a healthcare professional.'
                : 'The model predicts a low risk of diabetes. Maintain a healthy lifestyle.'}
            </p>
          </div>

          {result === 'Diabetic' && (
            <iframe
              className="mt-6 w-full h-96 rounded-lg shadow-lg"
              src="https://human.biodigital.com/widget/?be=2S0t&background.colors=0,0,0,0,0,0,0,0"
              title="Diabetes Simulation"
              allowFullScreen
            ></iframe>
          )}
        </>
      )}
    </div>
  );
};

export default DiabetesForm;
